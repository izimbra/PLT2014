-- optional entrypoint
entrypoints Program ;

-- Programs
Prog. Program  ::= [Def] ;
terminator Def "" ;

-- Comments are ignored
comment "//" ;
comment "#" ;
comment "/*" "*/" ;

-- Definitions
DFunc. Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
-- alt Body => BStm . Body ::= "{" [Stm] "}" ;
--DTypedef. Def ::= "typedef" ;
--VarDecl
--DStruct
DUsing. Def ::= "using" QConst ";" ;


-- Varible and argument declarations -- watch out for counterexample!
DecArg. Arg ::= Type Id ;
separator Arg "," ;
DecVar. Var ::= Type [Id] ;
separator nonempty  Id "," ;

-- statements
SExpr.    Stm ::= Exp ";" ;
SVar.     Stm ::= Var ";" ;
SRet.     Stm ::= "return" Exp ";" ;
--SDecl.    Stm ::= Type Id ;
SBlock.   Stm ::= "{" [Stm] "}" ;
SWhile.   Stm ::= "while" "(" Exp ")" Stm ;
STDef.    Stm ::= "typedef" QConst Id;
--terminator Function ""  ;
terminator Stm	    "" ;



-- expressions
EInt.    Exp16 ::= Integer ;
EDbl.    Exp16 ::= Double ;
--EString. Exp16 ::= String ;
EStrLit. Exp16 ::= [String] ;
EConst.  Exp15 ::= QConst ;
ELShift. Exp10 ::= Exp10 "<<" Exp11 ;
--left-associativity
ERShift. Exp10 ::= Exp11 ">>" Exp10 ;
EFunCall. Exp15 ::= Id "("[Exp]")" ;
EStrDot. Exp14 ::= Exp15"."Exp15 ;
EStrArr. Exp14 ::= Exp15"->"Exp15 ;
EAssign. Exp2 ::= Exp3"="Exp3; 
separator Exp "," ;
separator String "" ;

coercions Exp 16 ;

--qualified constants
QCon.  QConst ::= [Const] ;
separator nonempty Const "::" ;

CId.    Const ::= Id ;
CTempl. Const ::= Id"<"[Type]">" ;
separator nonempty Type "," ;

--TT.     TType ::= Type ;
--types
TInt.   Type  ::= "int" ;
TDoube. Type  ::= "double" ;
TConst. Type  ::= QConst ;

--names : Ident allows \', we should not!
token Id (letter (letter | digit | '_')*) ;



--SReturn. Stm ::= "return" Ident ;
--SReturn2. Stm ::= "return" Integer ;
--SExpr. Stm ::= "" ; 

--MClassMethod. Mth ::= Ident "::" Ident ;

--S1.   Stm  ::= Ident ;
--S2.   Stm  ::= Mth ;
--S3.   Stm  ::= Mth "<<" String "<<" Mth ;
--TInt. Type ::= "int" ;




