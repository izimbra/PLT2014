module AbsFP where

import Data.Map
-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Prog [Def]
  deriving (Eq,Ord,Show)

data Def =
   Fun Ident [Ident] Exp
  deriving (Eq,Ord,Show)

data Exp =
   EId Ident
 | EInt Integer
 | EApp Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | ELt Exp Exp
 | EIf Exp Exp Exp
 | EAbs Ident Exp  -- lambda abstractions
 | ECls Exp Vars    -- closures
  deriving (Eq,Ord,Show)

type Name = String

-- | Function symbol table
type Funs = Map Name Exp

-- | Local variable storage
type Vars = Map Name Exp

