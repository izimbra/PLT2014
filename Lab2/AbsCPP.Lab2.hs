module AbsCPP where

-- Haskell module generated by the BNF converter


newtype Id = Id String deriving (Eq,Ord,Show)
data Program =
   Prog [Def]
  deriving (Eq,Ord,Show)

data Def =
   Fun Type Id [Arg] [Stm]
  deriving (Eq,Ord,Show)

data Arg =
   Arg Type Id
  deriving (Eq,Ord,Show)

data Stm =
   SAss Id Exp
 | SExp Exp
 | SDecl Type Id
 | SDecls Type [Id]
 | SInit Type Id Exp
 | SReturn Exp
 | SWhile Exp Stm
 | SBlock [Stm]
 | SIfElse Exp Stm Stm
 | SPrint Exp
  deriving (Eq,Ord,Show)

data Exp =
   ETrue
 | EFalse
 | EInt Integer
 | EDouble Double
 | EId Id
 | EApp Id [Exp]
 | EPIncr Exp
 | EPDecr Exp
 | EIncr Exp
 | EDecr Exp
 | ETimes Exp Exp
 | EDiv Exp Exp
 | EPlus Exp Exp
 | EMinus Exp Exp
 | ELt Exp Exp
 | EGt Exp Exp
 | ELtEq Exp Exp
 | EGtEq Exp Exp
 | EEq Exp Exp
 | ENEq Exp Exp
 | EAnd Exp Exp
 | EOr Exp Exp
 | EAss Exp Exp
 | ETyped Type Exp
  deriving (Eq,Ord,Show)

data Type =
   TInt
 | TDouble
 | TVoid
 | TBool
  deriving (Eq,Ord,Show)

