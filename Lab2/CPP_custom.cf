-- CPP.cf
Prog. Program ::= [Def] ;
Func. Def     ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
ADecl.   Arg    ::= Type Id ;
separator Arg "," ;
terminator Def "" ;

SDecl.  Stm ::= Type Id ";"  ;
SAss.   Stm ::= Id "=" Exp ";" ;
SBlock. Stm ::= "{" [Stm] "}" ;
SPrint. Stm ::= "print" Exp  ";" ;

terminator Stm "" ;

TInt.    Type ::= "int" ;
TDouble. Type ::= "double" ;
TVoid.   Type ::= "void" ;
TBool.   Type ::= "bool" ;

SExp.    Stm    ::= Exp ";" ;
SDecls.  Stm    ::= Type [Id] ";" ;
SInit.   Stm    ::= Type Id "=" Exp ";" ;
SReturn. Stm    ::= "return" Exp ";" ;
SWhile.  Stm    ::= "while" "(" Exp ")" Stm ;
SBlock.  Stm    ::= "{" [Stm] "}" ;
SIfElse. Stm    ::= "if" "(" Exp ")" Stm "else" Stm ;

EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
ETrue.   Exp16 ::= "true";
EFalse.  Exp16 ::= "false";
EVar.    Exp16 ::= Id ;
EInt.    Exp16 ::= Integer ;
EAdd.    Exp11  ::= Exp11 "+" Exp12 ;
EApp.    Exp15  ::= Id "(" [Exp] ")" ;
EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;
EIncr.   Exp13  ::= "++" Exp14 ;
-- EDecr.   Exp13  ::= "--" Exp14 ; 
ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
-- EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp10  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp9  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;
 
coercions Exp 16 ;

 separator Exp "," ;

-- rules Type   ::= "bool" | "int" | "double" | "void" ;

 token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
